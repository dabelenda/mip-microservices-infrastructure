# All machines known to Ansible
{% if mip_install=='local' %}
[all]
{{ target_server }} ip_address={{ server_ip_address }} hostname={{ server_hostname }} fqdn={{ server_fqdn }} ansible_connection=local

# Managed hosts should contain all servers in the datacenter.
# Common software, configuration and security settings will be applied on them.
[managed]
{{ target_server }}

{% else %}
[all]
{{ target_server }} ip_address={{ server_ip_address }} hostname={{ server_hostname }} fqdn={{ server_fqdn }} ansible_connection=ssh ansible_ssh_user={{ server_user }} ansible_ssh_host={{ server_fqdn }} ansible_ssh_port=22

# Managed hosts should contain all servers in the datacenter.
# Common software, configuration and security settings will be applied on them.
[managed]
{{ target_server }}
{% endif %}

# Control node: one control node should be selected, not necessarily in the datacenter - it can be the local desktop -
# but it should satisfy the following requirements:
# - It has a direct network access to all services on the datacenter, in particular the databases and Marathon
# - We can install the required packages (docker-engine, docker-py, curl...) for proper function of the Ansible tasks
[control]
{{ target_server }}

# Infrastructure building block: define an 'infrastructure' group encompassing the configuration of the groups defined below
[infrastructure:children]
managed
zookeeper
mesos-leader
mesos-mixed
mesos-follower
reverse-proxy

# Nodes that will be processed for firewalling
[firewall:children]
managed

# Install Zookeeper, required by Mesos
[zookeeper]
{{ target_server }}

# Install Mesos leader and Marathon
[mesos-leader]
# none

# Install the full Mesos stack, including Mesos master and agent, Docker and Marathon
[mesos-mixed]
{{ target_server }}

# Install Mesos agent and Docker
[mesos-follower]
# none

# Install a reverse proxy to expose MIP sites and services
[reverse-proxy]
# none

{% if 'hdb' in mip_building_blocks %}
# Hospital database building block: define a 'hospital-database' group encompassing the configuration of the groups defined below
[hospital-database:children]
ldsm-db
postgresraw-ui

# Install PostgresRAW
[ldsm-db]
{{ target_server }}

# Install PostgresRAW-UI
[postgresraw-ui]
{{ target_server }}

{% endif %}
{% if 'ref' in mip_building_blocks %}
# Reference building block: define a 'reference' group encompassing the configuration of the groups defined below
[reference:children]
research-db
meta-db

# Install research-database
[research-db]
{% if features_from == 'ldsm-db' %}
# installed, but research data goes into ldsm-db
{% endif %}
{{ target_server }}

# Install meta-database
[meta-db]
{{ target_server }}

{% endif %}
{% if 'df' in mip_building_blocks %}
# Data Factory building block: define an 'data-factory' group encompassing the configuration of the groups defined below
[data-factory:children]
airflow-master
airflow-agent
df-bases

# Install the databases for Data Factory
[df-bases]
{{ target_server }}

# Install Airflow master (webserver)
[airflow-master]
{{ target_server }}

# Install Airflow agent (scheduler + scripts + related applications like SPM)
[airflow-agent]
{{ target_server }}

{% endif %}
{% if 'af' in mip_building_blocks %}
# Algorithm Factory building block: define an 'algorithm-factory' group encompassing the configuration of the groups defined below
[algorithm-factory:children]
woken-db
woken
woken-validation
chronos

# Install woken-database
[woken-db]
{{ target_server }}

# Install woken
[woken]
{{ target_server }}

# Install woken-validation
[woken-validation]
{{ target_server }}

# Install chronos
[chronos]
{{ target_server }}

{% endif %}
{% if 'wa' in mip_building_blocks %}
# Web Analytics building block: define an 'web-analytics' group encompassing the configuration of the groups defined below
[web-analytics:children]
portal-db
portal-backend
portal-frontend

# Install portal-database
[portal-db]
{{ target_server }}

# Install portal-backend
[portal-backend]
{{ target_server }}

# Install portal-frontend
[portal-frontend]
{{ target_server }}
{% endif %}
